{"version":3,"sources":["Title.jsx","LengthControl.jsx","Timer.jsx","TimerControl.jsx","Clock.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Title","id","LengthControl","setter","state","timerlabel","idLabel","length","idDecrement","idLength","idIncrement","lengthCount","setLengthCount","setTimerCount","tellerId","sessionOrBreak","label","className","onClick","undefined","size","increase","Timer","timerCount","audioRef","minutes","seconds","Error","secToMmSs","preload","src","ref","TimerControl","setBreakLengthCount","setSessionLengthCount","setTellerId","setSessionOrBreak","clearInterval","setInterval","value","current","pause","currentTime","Clock","useState","breakLengthCount","sessionLengthCount","useRef","useEffect","play","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.801bb418.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Title.css';\r\n\r\nconst Title = () => {\r\n    return (\r\n        <div id=\"title\">Pomodoro Clock</div>\r\n    )\r\n}\r\n\r\nexport default Title;\r\n","import React from 'react';\r\nimport { MdArrowUpward } from 'react-icons/md';\r\nimport { MdArrowDownward } from 'react-icons/md';\r\nimport './LengthControl.css';\r\n\r\nconst LengthControl = ({idLabel, length, idDecrement, idLength, idIncrement, lengthCount, setLengthCount, setTimerCount, tellerId, sessionOrBreak, label}) => {\r\n    const increase = (setter, state, timerlabel) => {\r\n        return (() => {\r\n            if (tellerId === undefined && state < 60) {\r\n            setter(state + 1);\r\n            if (sessionOrBreak === timerlabel) {\r\n                setTimerCount(state*60 + 60);\r\n            } \r\n            };\r\n        });\r\n    }\r\n\r\n    const decrease = (setter, state, timerlabel) => {\r\n        return (() => {\r\n            if (tellerId === undefined && state > 1) {\r\n                setter(state - 1);\r\n                if (sessionOrBreak === timerlabel) {\r\n                    setTimerCount(state*60 - 60);\r\n                }\r\n            };\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className=\"length-control\">\r\n            <div id={idLabel}>\r\n                {length}\r\n            </div>\r\n            <div id=\"arrowNumArrow\">\r\n                <button id={idDecrement} onClick={decrease(setLengthCount, lengthCount, label)}><MdArrowDownward size={24} /></button>\r\n                <div id={idLength}>{lengthCount}</div>\r\n                <button id={idIncrement} onClick={increase(setLengthCount, lengthCount, label)}><MdArrowUpward size={24} /></button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LengthControl;\r\n","import React from 'react';\r\nimport './Timer.css';\r\n\r\nconst Timer = ({timerCount, sessionOrBreak, audioRef}) => {\r\n    const secToMmSs = (state) => {\r\n        const minutes = (state-state%60)/60;\r\n        const seconds = state%60;\r\n        if (minutes < 10 && seconds < 10) {\r\n          return \"0\"+minutes+\":0\"+seconds;\r\n        }\r\n        if (minutes < 10 && seconds >= 10) {\r\n          return \"0\"+minutes+\":\"+seconds;\r\n        }\r\n        if (minutes >= 10 && seconds < 10) {\r\n          return minutes+\":0\"+seconds;\r\n        }\r\n        if (minutes >= 10 && seconds >= 10) {\r\n          return minutes+\":\"+seconds;\r\n        }\r\n        throw new Error(\"Unexpected time received \" + state);\r\n      }\r\n\r\n    return (\r\n        <div id=\"timer\">\r\n          <div className=\"timer-wrapper\">\r\n            <div id=\"timer-label\">{sessionOrBreak}</div>\r\n            <div id=\"time-left\">{secToMmSs(timerCount)}</div>\r\n            <audio id=\"beep\" preload=\"auto\" src=\"https://www.soundjay.com/misc/sounds/bell-ringing-05.mp3\" ref={audioRef}></audio>\r\n          </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Timer;\r\n","import React from 'react';\r\nimport './TimerControl.css';\r\nimport { MdPlayArrow } from 'react-icons/md';\r\nimport { MdPause } from 'react-icons/md';\r\nimport { MdRefresh } from 'react-icons/md';\r\n\r\nconst TimerControl = ({setBreakLengthCount, setSessionLengthCount, setTimerCount, tellerId, setTellerId, setSessionOrBreak, audioRef}) => {\r\n      \r\n    const startstop = () => {\r\n        if (tellerId !== undefined) {\r\n          clearInterval(tellerId);\r\n          setTellerId(undefined);\r\n        } else {\r\n          const id = setInterval(() => {setTimerCount((value) => value - 1)}, 1000);\r\n          setTellerId(id);\r\n        }\r\n      }\r\n\r\n      const reset = () => {\r\n        setBreakLengthCount(5);\r\n        setSessionLengthCount(25);\r\n        setTimerCount(1500);\r\n        clearInterval(tellerId);\r\n        setTellerId(undefined);\r\n        setSessionOrBreak(\"Session\");\r\n        audioRef.current.pause();\r\n        audioRef.current.currentTime = 0;\r\n      }\r\n    \r\n  \r\n    return (\r\n        <div className=\"timer-control\">\r\n            <button id=\"start_stop\" onClick={startstop}><MdPlayArrow size={24} className=\"arrow\" /><MdPause size={24} className=\"arrow\" /></button>\r\n            <button id=\"reset\" onClick={reset}><MdRefresh size={24} className=\"arrow\" /></button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TimerControl;\r\n","import React, {useState, useEffect, useRef} from 'react';\r\nimport './Clock.css';\r\nimport LengthControl from './LengthControl';\r\nimport Timer from './Timer';\r\nimport TimerControl from './TimerControl';\r\n\r\nconst Clock = () => {\r\n    const [breakLengthCount, setBreakLengthCount] = useState(5);\r\n    const [sessionLengthCount, setSessionLengthCount] = useState(25);\r\n    const [timerCount, setTimerCount] = useState(1500); \r\n    const [tellerId, setTellerId] = useState();\r\n    const [sessionOrBreak, setSessionOrBreak] = useState(\"Session\");\r\n  \r\n    const audioRef = useRef();\r\n  \r\n    useEffect(() => {\r\n      if (timerCount === 0) {\r\n        audioRef.current.play();\r\n      }\r\n      if (timerCount < 1) {\r\n        clearInterval(tellerId);\r\n        setTellerId(undefined);\r\n        \r\n        if (sessionOrBreak === \"Session\") {\r\n          setSessionOrBreak(\"Break\");\r\n          setTimerCount(breakLengthCount*60);\r\n        } else {\r\n          setSessionOrBreak(\"Session\");\r\n          setTimerCount(sessionLengthCount*60);\r\n        }\r\n        const id = setInterval(() => {setTimerCount((value) => value - 1)}, 1000);\r\n        setTellerId(id);\r\n      }\r\n    }, [timerCount, tellerId, breakLengthCount, sessionLengthCount, sessionOrBreak]);\r\n\r\n    return (\r\n        <div id=\"clock\">\r\n          <div id=\"length-control\">\r\n            <div id=\"break\">\r\n              <LengthControl idLabel={\"break-label\"} length={\"Break Length\"} idDecrement={\"break-decrement\"} idLength={\"break-length\"} idIncrement={\"break-increment\"} lengthCount={breakLengthCount} setLengthCount={setBreakLengthCount} setTimerCount={setTimerCount} tellerId={tellerId} sessionOrBreak={sessionOrBreak} label={\"Break\"} />\r\n            </div>\r\n            <div id=\"session\">\r\n              <LengthControl idLabel={\"session-label\"} length={\"Session Length\"} idDecrement={\"session-decrement\"} idLength={\"session-length\"} idIncrement={\"session-increment\"} lengthCount={sessionLengthCount} setLengthCount={setSessionLengthCount} setTimerCount={setTimerCount} tellerId={tellerId} sessionOrBreak={sessionOrBreak} label={\"Session\"} />\r\n            </div>\r\n          </div>\r\n          <div className=\"timer\">\r\n            <Timer timerCount={timerCount} sessionOrBreak={sessionOrBreak} audioRef={audioRef} />\r\n          </div>\r\n          \r\n          <TimerControl setBreakLengthCount={setBreakLengthCount} setSessionLengthCount={setSessionLengthCount} setTimerCount={setTimerCount} tellerId={tellerId} setTellerId={setTellerId} setSessionOrBreak={setSessionOrBreak} audioRef={audioRef} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Clock;\r\n","import React from 'react';\nimport './App.css';\nimport Title from './Title';\nimport Clock from './Clock';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Title />\n      <Clock />\n    </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}